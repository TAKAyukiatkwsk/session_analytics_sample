id,title
1,関数型オブジェクト指向命令型 Scala。Scala は、オブジェクト指向、関数型プログラミング、命令型プログラミングといった複数のパラダイムを組み合わせます。Scala を、ボイラープレートが少ないオブジェクト指向な「better Java」として使ってしまったり、関数型なコードにだけ集中して「worse Haskell」として使うという甘い話に騙されてしまう人も多いと思います。本セッションでは、上記全てのパラダイムの全てを受け止め、利点をシンプルに組み合わせた「退屈な」Scala スタイルを紹介します。関数型のコードを基本としますが、コードを簡潔にするときは可変性を使うことをいとわず、またモジュール化されたコンポーネントにはオブジェクト指向も使います。
2,Scala における型クラス入門。型クラスと呼ばれる概念をScalaではどのように実現していて、それをどのようにして利用するかについて、関連するトピックも含めて基本から解説する。わかりやすさのため、できるだけ抽象的な説明を避け、具体的な例をもとに説明する。Scalaz や Cats のような主要なライブラリについても簡単に触れる。可能であれば、Scala3 以降でどのようになるかについても話したいと考えている。
3,Spotify での Scio を使ったデータ処理。2年前、Spotify はデータパイプラインを開発し Google Dataflow へとデプロイするために、オープンソースの Scala フレームワーク Scio を導入しました。本セッションでは、Scio の進化について議論し、2年間の Scio のプロダクションでの運用の要点を共有します。また、Spotify で運用されている興味深いデータ処理ワークフローをいくつかと、これを実運用することで得られた知見、そしてどのようにこの知見を活用して Scio をより速く、より安全に、かつより使いやすくしたのかをご紹介します。
4,Scala Driven Management。関数型、型安全、型推論、Java資産活用など、Scalaのプログラミング言語としての性質は、しばしば開発プロセスそのものに様々な影響を与えます。その結果、各エンジニアが業務での開発にどう向き合うか、育成していくか、といったエンジニアリングマネジメントのプロセスにも影響があることがあるでしょう。業務での実例を交えながら、Scalaを開発言語として選択することがエンジニアリングマネージメントにどのように影響するかを説明します。
5,"プロジェクトで引き回す型をEffにするメリット。scalaでプロジェクトを始める時、設計を考える人は早い段階でインターフェースの型で迷うことになると思います。Future[A]にするのか、Future[Either[E, A]]にするのか、Futureを利用せずTaskを利用するのか。私が試したそれぞれのメリットデメリットと、1番良い形を実現できる(と思っている)Effの紹介をします。"
6,"ハイパフォーマンスScala。ScalaはJVM上で実行されるため、パフォーマンスが良い言語と言われています。しかし（どの言語でもそうであるように）実際に開発した際にパフォーマンスに悩まされる方も多々いるのではないでしょうか？

Full GCを発生させない
DBアクセス等のブロッキング処理
Scala言語特有の書き方
etc
上記のようにScalaでハイパフォーマンスなアプリケーションを開発するためには様々な事について、考慮しなければなりません。本発表ではパフォーマンス計測のためのプロファイリング方法から始まり、ボトルネックを解消するScalaの書き方、ノンブロッキング処理手法、並行処理手法について発表します。"
7,"Scala ♥ Graal。#TwitterVMTeam では、Scala アプリケーションの性能向上のために Java 仮想マシン (JVM) の最適化に投資しています。私たちは JIT コンパイラーとして Graal へ移行して、有意な性能向上を観測しました。この移行によって JVM のコードベースが Java となり、扱いやすくなったため、更なる最適化を実装する道のりが開きました。

このトークでは、私たちの Scala アプリケーション内のパフォーマンスの課題、及びそれをどう #TwitterVMTeam が乗り越えてきたのかを解説します。より効率の高い Future 実行の最適化や、invokeinterface 呼び出し時のオーバーヘッド対策などについてカバーします。"
8,継続とDI。情報システムが解決しようとする問題はますます複雑化しています。複雑な問題に解決するには、問題を分割し解を合成する分割統治のアプローチが必要です。このセッションでは、再利用可能なモジュールを合成する手法として「継続渡しスタイル」と「DI」という二つのアプローチについて解説し、それらを比較しながら分割統治のためのツールを考察します。
9,Scala and SRE
10,"ハウツー・テストproper{t,l}y。ユニットテストはすっかり定着したプラクティスで、それに加えてプロパティベースのテストの人気もそれに追いつきつつあります。ほとんどの関数型言語で一つ、時には多くの実装がなされています。しかし、「プロパティベース・テスト」には多くの側面があります。幾つか挙げれば、テストケースのランダム性、網羅性、最小化と普遍化、カスタムジェネレーター、フィルターなどです。非常に多くの場合、プロパティベースのテストはそのフレームワークのすべての機能を利用していません。このセッションでは、関数型言語でのプロパティベースのテストの最新状況と、よくあるユースケース、テクニック、落とし穴を話します。"