id,title
1,Cloud Code とコンテナツールで Kubernetes を使った開発を徹底効率化。Kubernetes を使った開発は、今やデファクトと呼べるほどに普及しました。Kubernetes クラスタ管理を Google Kubernetes Engine にオフロードできる一方で、Kubernetes を使った開発では、従来とは異なった知識、開発フローが求められます。「Kubernetes の学習コストが高い」「ローカル開発で手間がかかる」といった声を耳にすることも多いでしょう。 本セッションでは、Cloud Code、skaffold、Tekton などを使って、Kubernetes 開発をどのように効率化するか、デモを中心にご紹介します。Kubernetes は怖くない！
2,Cloud Run 〜Knative を使った新しいサーバーレス。Kubernetes 上でサーバーレスを実現するオープンソースソフトウェア「Knative」は昨年の Google Cloud Next 2018 in San Francisoで発表されて以来、注目を集めてきました。この Knative をベースにした新しいサーバーレス サービス「Cloud Run」が GCP で遂にリリースされました。本セッションでは Cloud Run を使って具体的にどういったことが出来るのかデモを交えながら説明します。また App Engine や Cloud Functions といった GCP の他のサーバーレス サービスとの使い分けのポイントなどについても説明します。
3,メルペイのマイクロ サービスを支える GKE と Cloud Spanner。2019 年 2 月にリリースしたメルペイのサービスでは、マイクロサービスアーキテクチャを採用し、そのインフラに Google Kubernetes Engine（GKE）と Cloud Spanner を利用しています。多くのお客様からのリクエストを処理するために、なぜメルペイは GKE と Spanner を選択し、どのようにシステムを設計、開発したか、またメルペイの決済を支えるマイクロサービスを Google Cloud Platform の上でどのように運用しているかを説明します。
4,Twitter 登壇！INSIDE Digital 〜 グローバル規模で活躍するサービス事業社の裏側 〜。インターネットサービス業界で活躍するエンジニアの皆様に向けたイベント『Google Cloud INSIDE Digital』を Next Tokyo 特別エディションとして開催します。今回は、グローバル規模でインターネットサービスを提供する Twitter をゲストスピーカーに迎え、普段知ることのできない開発の裏側や、Google Cloud Platform 活用方法を紹介いただきます。また来場者参加型企画としてLT 大会も開催します。
5,進化する音声認識 : 音声コマンドや IVR の最適化から音声分析まで。クラウドをベースとする音声認識サービスは、従来よりも導入が簡単で、認識の精度もより正確になり、人間のレベルに確実に近づいています。しかし、自然言語ベースのユース ケースはますます複雑化し、高まるユーザーの期待と相まって、以前は「十分」だった認識レベルでも、現在では優れたエンドユーザーエクスペリエンスを作り出すのに十分ではありません。このセッションでは、高度なテクニックによって認識の精度を高める方法、音声分析からインサイトを得る方法、音声認識と翻訳処理をリアルタイムで実行するソリューションの構築方法について解説します。
6,GCP で実現する次世代ネット通販レコメンデーション。データ解析プラットフォーム『ASKUL-EARTH』上でネット通販のレコメンデーションエンジンの開発を行い、その結果、カゴ入れ率が大幅に向上した。本セッションでは既存の大規模システムに一からデータ基盤を構築しレコメンド機能を提供するまでの流れを振り返るとともに、その過程でいかに GCP の各種サービスを活用したか解説する。またレコメンド精度のさらなる向上とともに、物流モデルとの連携によるビジネス全体の最適化に向けた今後の取り組みを紹介する。
7,Site Reliability Engineering 入門。Site Reliability Engineering（SRE）は、Gmail や Google 検索のような大規模システムをサポートするために Google によって生み出されました。このセッションでは、世界的なサービスを確実に運用するにあたって Google が用いている SRE のプラクティスと原則について見ていきます。
8,"Istio, Kubernetes, Spinnaker を使ったカナリア デプロイメント。Istio, Kubernetes, Spinnaker を使うことで、カナリアデプロイメントなど高度なロールアウトパターンをサポートし、アプリケーションを安全かつ簡単にデプロイすることが可能です。本セッションではこれらを如何に GCP 上で実現するか、最新のプロダクト情報も交えながら説明します。"
9,Cloud Spanner in Action。このセッションでは Cloud Spanner の特徴をご紹介し、さらにプロダクション環境での利用時に必要となる、データのエクスポート、モニタリングツールの活用、Spanner 特有のクエリ実行方式の違い等について、実際の操作画面やデモを通じてより詳細に解説します。 このセッションは普段から RDBMS を使用して開発、運用しているデータベースエンジニアやアプリケーションデベロッパー向けのセッションとなります。
10,関数型オブジェクト指向命令型 Scala。Scala は、オブジェクト指向、関数型プログラミング、命令型プログラミングといった複数のパラダイムを組み合わせます。Scala を、ボイラープレートが少ないオブジェクト指向な「better Java」として使ってしまったり、関数型なコードにだけ集中して「worse Haskell」として使うという甘い話に騙されてしまう人も多いと思います。本セッションでは、上記全てのパラダイムの全てを受け止め、利点をシンプルに組み合わせた「退屈な」Scala スタイルを紹介します。関数型のコードを基本としますが、コードを簡潔にするときは可変性を使うことをいとわず、またモジュール化されたコンポーネントにはオブジェクト指向も使います。
11,Scala における型クラス入門。型クラスと呼ばれる概念をScalaではどのように実現していて、それをどのようにして利用するかについて、関連するトピックも含めて基本から解説する。わかりやすさのため、できるだけ抽象的な説明を避け、具体的な例をもとに説明する。Scalaz や Cats のような主要なライブラリについても簡単に触れる。可能であれば、Scala3 以降でどのようになるかについても話したいと考えている。
12,Spotify での Scio を使ったデータ処理。2年前、Spotify はデータパイプラインを開発し Google Dataflow へとデプロイするために、オープンソースの Scala フレームワーク Scio を導入しました。本セッションでは、Scio の進化について議論し、2年間の Scio のプロダクションでの運用の要点を共有します。また、Spotify で運用されている興味深いデータ処理ワークフローをいくつかと、これを実運用することで得られた知見、そしてどのようにこの知見を活用して Scio をより速く、より安全に、かつより使いやすくしたのかをご紹介します。
13,Scala Driven Management。関数型、型安全、型推論、Java資産活用など、Scalaのプログラミング言語としての性質は、しばしば開発プロセスそのものに様々な影響を与えます。その結果、各エンジニアが業務での開発にどう向き合うか、育成していくか、といったエンジニアリングマネジメントのプロセスにも影響があることがあるでしょう。業務での実例を交えながら、Scalaを開発言語として選択することがエンジニアリングマネージメントにどのように影響するかを説明します。
14,"プロジェクトで引き回す型をEffにするメリット。scalaでプロジェクトを始める時、設計を考える人は早い段階でインターフェースの型で迷うことになると思います。Future[A]にするのか、Future[Either[E, A]]にするのか、Futureを利用せずTaskを利用するのか。私が試したそれぞれのメリットデメリットと、1番良い形を実現できる(と思っている)Effの紹介をします。"
15,"ハイパフォーマンスScala。ScalaはJVM上で実行されるため、パフォーマンスが良い言語と言われています。しかし（どの言語でもそうであるように）実際に開発した際にパフォーマンスに悩まされる方も多々いるのではないでしょうか？

Full GCを発生させない
DBアクセス等のブロッキング処理
Scala言語特有の書き方
etc
上記のようにScalaでハイパフォーマンスなアプリケーションを開発するためには様々な事について、考慮しなければなりません。本発表ではパフォーマンス計測のためのプロファイリング方法から始まり、ボトルネックを解消するScalaの書き方、ノンブロッキング処理手法、並行処理手法について発表します。"
16,"Scala ♥ Graal。#TwitterVMTeam では、Scala アプリケーションの性能向上のために Java 仮想マシン (JVM) の最適化に投資しています。私たちは JIT コンパイラーとして Graal へ移行して、有意な性能向上を観測しました。この移行によって JVM のコードベースが Java となり、扱いやすくなったため、更なる最適化を実装する道のりが開きました。

このトークでは、私たちの Scala アプリケーション内のパフォーマンスの課題、及びそれをどう #TwitterVMTeam が乗り越えてきたのかを解説します。より効率の高い Future 実行の最適化や、invokeinterface 呼び出し時のオーバーヘッド対策などについてカバーします。"
17,継続とDI。情報システムが解決しようとする問題はますます複雑化しています。複雑な問題に解決するには、問題を分割し解を合成する分割統治のアプローチが必要です。このセッションでは、再利用可能なモジュールを合成する手法として「継続渡しスタイル」と「DI」という二つのアプローチについて解説し、それらを比較しながら分割統治のためのツールを考察します。
18,Scala and SRE
19,"ハウツー・テストproper{t,l}y。ユニットテストはすっかり定着したプラクティスで、それに加えてプロパティベースのテストの人気もそれに追いつきつつあります。ほとんどの関数型言語で一つ、時には多くの実装がなされています。しかし、「プロパティベース・テスト」には多くの側面があります。幾つか挙げれば、テストケースのランダム性、網羅性、最小化と普遍化、カスタムジェネレーター、フィルターなどです。非常に多くの場合、プロパティベースのテストはそのフレームワークのすべての機能を利用していません。このセッションでは、関数型言語でのプロパティベースのテストの最新状況と、よくあるユースケース、テクニック、落とし穴を話します。"
20,サイバーエージェントにおけるプライベートコンテナ基盤AKEを支える技術
21,マイクロサービスアプリケーションとしての機械学習
22,"""Yahoo! JAPANのKubernetes-as-a-Service""で加速するアプリケーション開発"
23,Kubernetes x PaaS - コンテナアプリケーションのNoOpsへの挑戦
24,2018年のDocker・Moby
25,今こそKubernetes。最高の仕事道具で使いこなそう
26,Kubernetesのない世界 すべてがサーバーレスになる
27,『コンテナ疲れ』と戦う、k8s・PaaS・Serverlessの活用法！
28,CNCF: Evolving the Container Landscape
29,"サーバレスで動かすトークン発行プラットフォーム。Ethereum上で独自のトークンを発行するプラットフォームをサーバレスアーキテクチャにより構築します。
UIをFlutter/Vue.js/Slackアプリで作成し、バックエンドをAppSync/Lambda/DynamoDB/Cognitoを使用して構築していきます。
Ethereumのトークン企画はERC1155を使用し、Metamaskを使用したアドレス発行と組み合わせてトークンの管理を行います。"
30,"AWS Serverlessを活用したサービス監視。Serverlessの活用ポイントのうち、以下は非常に大きなアドバンテージです

常時データを送信しても良いエンドポイントの提供
サーバーに常時起動せずとも実行できるランタイム環境の提供
上記のアドバンテージはサービス監視するためのメリットに溢れています
今回は特に中小企業の受託開発に向けた以下のOSS活動に関してご紹介します"
31,"SaaSを海外展開するために役立つインフラTips。Instoll株式会社では複数のSaaSをリリース初日から海外展開しています。
海外の現地法人を持たないスタートアップがどのように法務・税務を捉え、24時間稼働し続けるインフラをAWSで構築したのか。
すべてお伝えします。"
32,"AWS All Stars。コミュニティイベントで多く行われる「ライトニングトーク(LT)」。
アマゾン ウェブ サービス ジャパンのテクニカルスペシャリスト 14人(!?)による怒涛のライトニングトークを行います。
AWSのソリューションアーキテクト/クラウドサポートエンジニアの3分間・3スライドのLTを時間いっぱいご堪能ください。
(本当に最終登壇者までいくのか！？)"
33,http4sとcats-effectで可愛らしい、関数型らしいアプリケーションを書こう！٩(๑^o^๑)۶ Scalaのコード、可愛く書きたくないですか？ tagless final、cats effectを使って可読性の高い関数型らしいコードの書き方について発表します！٩(๑^o^๑)۶
34,アニメーションで理解するAkka StreamsとAkka HTTP。知らない技術を理解するときに図解やアニメーションで理解するのは好きですか？私は大好きです。 このセッションはAkka StreamsおよびAkka HTTPに関して、 アニメーションで理解の手助けをしようというものです。 Akka StreamsやAkka HTTPに関しては、私が見る限りの本番環境での導入がだいぶ広がってきているという印象があります。 昨年のScala関西 Summitを含む各カンファレンスでの発表などをみても、そう感じているところです。 ただ、どちらも内部動作がわかりにくいライブラリだと思います。興味がある、あるいは普段使ってはいるものの、 Akka自体を勉強する時間があまりとれないため、なんとなくコードは書けるが「何が起こっているかわからない」 「何に注意すべきかわからない」という人もいるのではないでしょうか？ このセッションでは、アニメーションによって内部動作の理解のきっかけを掴むことで、実際のコードを探るときの助けになる、 ドキュメントを読んでより頭に入ってきやすくなる、ということを目指しています。
35,"Format things with scalafmt。コードフォーマッタの導入はコーディング規約の強制や大規模な自動リファクタリングなどソフトウェア開発に非常に多くの恩恵をもたらします。 scala以外の言語でもgofmtやprettierなど様々なコードフォーマッタが開発されており、多くのソフトウェア開発者に日々活用されています。

scalaのコードフォーマッタも活発に開発されています。 scalaのコードフォーマッタの一つであるscalafmtは多くのscalaプロジェクトで採用されているツールです。

この発表ではscalafmtの紹介、またscalafmtの数多くある設定項目のうち一部を紹介しscalafmtの高機能さを享受するための方法についてお話しようと思います。"
36,Scala-erにも影響ありそうなJavaの現状まとめ。Javaのリリースサイクルやサポートが変更され、またJVMへの変更も多く予定されています。 このセッションでは、Scalaを利用する際にも影響がありそうなJavaの現状をまとめてお話したいと思います。
37,Akkaを分散トレーシングで見てみよう。マイクロサービス化されたアプリケーションでは、パフォーマンス測定の一つとして分散トレーシングが挙げられます。 Akka HTTPをAPIサーバの一つとして構築した際に、他のサービスとのやり取りを含め全体のパフォーマンスを可視化するには、分散トレーシングの仕組みに載せる必要が出てきます。 そこで、数ある分散トレーシングの実装の中から、MetricsとTracingの実装の一つであるOpenCensusと、 OpenCensusが利用できる分散トレーシングのバックエンドの一つであるJaegerを用いて、 Akka HTTPのAPIサーバでの分散トレーシングの可視化を紹介します。
38,DatabricksとSparkではじめる [データ分析/機械学習] 実践入門。DELISH KITCHENという料理動画メディアでは、SparkホスティングサービスであるDatabricksを利用してデータ分析や機械学習を行っています。 個人的にSparkを利用した機械学習は敷居が高い印象があったのですが、Databricksを導入して非常に簡単に実現できたことから、 実際のアプリケーションで行われている内容を踏まえてサンプルコードで実例を示しながらご紹介をさせていただければと思います。
39,"Json codec を楽しもう、現場で役立つ circe。Webアプリケーションなんかを開発していると、 例として Http Request/Response を処理するのに大抵は Json を扱いますよね。

わたしは Scala を触り始めてから長らく play-json と歩みを共にしてきたのですが、 最近(今更)、 circe を触ってみて大変便利でしたので実コードと解説を交えながら紹介していこうかと思います。"
40,実践GraphQL on Scala。Facebookが提唱してGithubが採用するなど、世界的にも日本的にも流行の兆しが見えるGraphQL。 そのGraphQLをAPIサーバの設計にGraphQLを採用し、実装にはSangriaを用いてすでに本番環境で稼働しています。 このセッションでは、そもそもなぜGraphQLを採用したのか、どういったプロダクトの開発に採用したのかといった背景に加えて、 GraphQLなAPIサーバをどう設計し、どのように開発していくのかについて紹介します。